---
modules:
  - docassemble.base.util
  - docassemble.base.legal
  - docassemble.income.income
  - .cru_affirmative_complaint_module
---
metadata:
  title: |
    Anti-Debt Collection Affirmative Lawsuit - Greater Boston Legal Services Consumer Rights Unit
  description: |
    An interview for advocates to prosecute anti-debt collection affirmative lawsuits. 
  authors:
     - name: Matt Brooks
       organization: Greater Boston Legal Services
  revision_date: 2020-12-21
---
objects:
  - client: Individual
  - advocate: Individual
  - recipients: CollectorList
  - collector: Collector
  - debts: DebtList
  - defendants_list: DebtList
---
comment: |
  ## Controls the order in which 
  ## the interview asks questions. Doesn't need to be mandatory because 
  ## of the umbrella interview.
code: |
  multi_user = True
  which_debts_in_litigation
  which_addresses
  defensive_case_numbers
  affirmative_case_info
  # defendants_list
  # defendants_list[0].address.address 
  # debts[i].defensive_case_number
  # debts[i].affirmative_case_state_or_federal 
  # The above are commented out because the cleanest way to gather a new attribute for a subset of already gathered objects seems to be to let docassemble do it for you. This is per Jonathan Pyle. I'll have to wait until I've built the template or a review screen to see if this works right. COULD POTENTIALLY ALSO JUST SET THE .gathered attribute of debts to False? COULD ALSO MAYBE MAKE .address an attribute of a Debt(), set it to a default value, undefine it here, and then trigger the gathering process again? Could also just duplicate the object and put it in a new list, perhaps of a new object type, meanwhile deleting the old objects so there's still only one source of truth? I also keep wondering whether the documentation for gathering lists within lists could be helpful?
  if you_are_done:
    interview_venue_done = True

---
question: |
  Welcome! You are here because you want to sue a debt collector. Good luck!
field: advocate_splash_screen
subquestion: |
  Click "Continue" to keep going with the interview.  

---
code: |
  debt_names = dict()
  for debt in debts:
    debt_names.update({debt.name: debt.name})
   
---
comment: |
  for some reason, object_checkboxes isn't working here like in the example. Here's my solution: I'm going to use regular checkboxes. I'm going to write code that just displays strings matching the names of the Debt() objects in Debts() rather than presenting the objects themselves. I'm then going use the boolean values generated by defendants_list to iterate through debts like this:
    for debt in debts:
      if defendants_list[str(debt.name)]:
        debt.in_litigation = True
      else:
        debt.in_litigation = False
    if for some reason you can't debts.name under choices, just use Python code to create a separate list called debt_names beforehand, and display that under choices
question: |
  Which debts are you trying to sue on?
fields:
  - Proposed Defendant(s): defendants_list
    datatype: checkboxes
    code: |
      debt_names
---
code: |
  debts_in_litigation = list()
  for debt in debts:
      if defendants_list[str(debt.name)]:
        debt.in_litigation = True
        debts_in_litigation.append(debt)
      else:
        debt.in_litigation = False
  which_debts_in_litigation = True
---
# controls which addresses docassemble asks for. Could be combined with above code block as follows:
# for debt in debts:
     # if defendants_list[str(debt.name)]:
     #   debt.address.address
code: |
  for debt in debts:
    if debt.in_litigation:
      debt.address.address
  which_addresses = True
---
question: |
  Address when the ${ debt.name } debt you want to litigate was incurred.
fields:
  - Street Address: debts[i].address.address
  - City: debts[i].address.city
  - State: debts[i].address.state
  - Zip: debts[i].address.zip
---
code: |
  for debt in debts:
    if debt.in_litigation:
      debt.defensive_case_number
  defensive_case_numbers = True
---
question: |
  Enter the information about the case involving the ${ debt.name } debt that was filed in violation of 1692i (FDCPA Venue Provisions)
fields:
  - Case Number: debts[i].defensive_case_number # with this information, we can lookup court.division and court.type
  - Filing Date: debts[i].defensive_case_filing_date
---
code: |
  for debt in debts:
    if debt.in_litigation:
      debt.affirmative_case_state_or_federal
  affirmative_case_info = True
--- 
question: |
  Tell us about the court where you'll file the complaint in the case involving ${ debt.name }.
fields:
  - State or Federal: debts[i].affirmative_case_state_or_federal
    choices:
      - 'State'
      - 'Federal'
  - Court type: debts[i].affirmative_case_court_type
    choices:
      - 'Superior'
      - 'District'
      - 'Boston Municipal'
    show if:
      variable: debts[i].affirmative_case_state_or_federal
      is: 'State'
  - Division name: debts[i].affirmative_case_court_division
    show if:
      variable: debts[i].affirmative_case_state_or_federal
      is: 'State'

---
question: |
  Here is your document
sets: you_are_done
---  
comment: |
  complaint_heading = str(debts[i].affirmative_case_court_division + debts[i].affirmative_case_court_type)
---
comment: |
  if debts[i].affirmative_case_state_or_federal == 'State':
    jurisdiction_statute = 'TK state jurisdiction statute'
    jurisdiction_citations = 'TK state jurisdiction citations'
  else:
    jurisdiction_statute = 'TK federal jurisdiction statute'
    jurisdiction_citations = 'TK federal jurisdiction citations'
    debts[i].affirmative_case_state_or_federal = ''
    debts[i].affirmative_case_court_type = 'Federal District Court'

---
comment: |
	ma_court_list_by_code = { '01': 'Boston Municipal Central', 
	'02':   'Roxbury Municipal', 
  '03':   'South Boston Municipal', 
	'04':	'Charlestown Municipal', 
	'05':   'East Boston Municipal',
	'06':	'West Roxbury Municipal',
	'07':	'Dorchester Municipal',
	'08':	'Brighton Municipal',
	'09':	'Brookline District Court',
	'10':	'Somerville District Court',
	'11':	'Lowell District Court',
	'12':	'Newton District Court',
	'13':	'Lynn District Court',
	'14':	'Chelsea District Court',
	'15':	'Brockton District Court',
	'16':	'Fitchburg District Court',
	'17':	'Holyoke District Court',
	'18':	'Lawrence District Court',
	'20':	'Chicopee District Court',
	'21':	'Marlboro District Court',
	'22':	'Newburyport District Court',
	'23':	'Springfield District Court',
	'25':	'Barnstable District Court',
	'26':	'Orleans District Court',
	'27':	'Pittsfield District Court',
	'28':	'Northern Berkshire District Court',
	'29':	'Southern Berkshire District Court',
	'31':	'Taunton District Court',
	'32':	'Fall River District Court',
	'33':	'New Bedford District Court',
	'34':	'Attleboro District Court',
	'35':	'Edgartown District Court',
	'36':	'Salem District Court',
	'38':	'Haverhill District Court',
	'39':	'Gloucester District',
	'40':	'Ipswich District Court',
	'41':	'Greenfield District Court',
	'42':	'Orange District Court',
	'43':	'Palmer District Court',
	'44':	'Westfield District Court',
	'45':	'Northampton District Court',
	'47':	'Concord District Court',
	'48':	'Ayer District Court',
	'49':	'Framingham District Court',
	'50':	'Malden District Court',
	'51':	'Waltham District Court',
	'52':	'Cambridge District Court',
	'53':	'Woburn District Court',
	'54':	'Dedham District Court',
	'55':	'Stoughton District Court',
	'56':	'Quincy District Court',
	'57':	'Wrentham District Court',
	'58':	'Hingham District Court',
	'59':	'Plymouth District Court',
	'60':	'Wareham District Court',
	'61':	'Leominster District Court',
	'62':	'Worcester District Court',
	'63':	'Gardner District Court',
	'64':	'Dudley District Court',
	'65':	'Uxbridge District Court',
	'66':	'Milford District Court',
	'67':	'Westborough District Court',
	'68':	'Clinton District Court',
	'69':	'East Brookfield District Court',
	'70':	'Winchendon District Court',
	'71':	'Suffolk Juvenile',
	'72':	'Barnstable Superior Court',
	'73':	'Bristol Superior Court',
	'74':	'Dukes Superior Court',
	'75':	'Nantucket Superior Court',
	'76':	'Berkshire Superior Court',
	'77':	'Essex Superior Court',
	'78':	'Franklin Superior Court',
	'79':	'Hampden Superior Court',
	'80':	'Hampshire Superior Court',
	'81':	'Middlesex Superior Court',
	'82':	'Norfolk Superior Court',
	'83':	'Plymouth Superior Court',
	'84':	'Suffolk Superior Court',
	'85':	'Worcester Superior Court',
	'86':	'Peabody District Court',
	'87':	'Natick District Court',
	'88':	'Nantucket District Court',
	'89':	'Falmouth District Court',
	'98':	'Eastern Hampshire District Court',
  '99': 'Unknown Court'}
	
  try:
    court_code = case_number[2] + case_number[3]
  except:
    court_code = '99'
	try:
    court_name = ma_court_list_by_code[court_code]
  except:
    court_name = 'Unknown Court'
    
	if court_code in ['01', '02', '03', '04', '05', '06', '07', '08']:
		court_department = 'Municipal Court'
	elif court_code in ['72', '73', '74', '75', '76', '77', '78', '79', '80',
    '81', '82', '83', '84', '85']:
		court_department = 'Superior Court'
	else:
		court_department = 'District Court'
        
	try:
    if case_number[4] + case_number[5] in ['sc', 'SC', 'Sc', 'sC']:
		  small_claims = True
  except:
    small_claims = False
	else:
		small_claims = False
---



