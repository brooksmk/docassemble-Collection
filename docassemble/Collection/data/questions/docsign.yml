---
metadata:
  title: |
    Sign a document
  description: |
    An interview that allows you to electronically sign a word document.
  authors:
    - name: Quinten Steenhuis
      organization: Greater Boston Legal Services
    - name: Matt Brooks
      organization: Greater Boston Legal Services
  revision_date: 2019-03-11
---
modules: 
  - docassemble.base.util
  - docassemble.base.legal
  #- basic-questions-gbls.yml
---
objects:
  - client: Individual
  - advocate: Individual
  - adverse_party: Person
  - adverse_advocate: Individual
---
mandatory: True
code: |
  multi_user = True
  client.name.first
  the_file
  we_have_switched
  # if not user_logged_in():
  #  login_screen
  # if (user_info().first_name != client.name.first) or (user_info().last_name != client.name.last):
  #  kick_out_wrong_user
  client_splash_seen
  client.signature
  agrees_to_sign
  success_sending_email
  end_screen
---
question: |
  Tell us the following information.
fields:
  - Client First Name: client.name.first
  - Client Last Name: client.name.last
  - Your First Name: advocate.name.first
  - Your Last Name: advocate.name.last
  - Your email: advocate.email
---
comment: |
  ## This is the ending screen for the advocate. The interview_url() function
  ## takes arguments, and passes them to the interview's url--with a unique
  ## session ID--as url_args(). We then use code in the next block to define
  ## the variable we_have_switched if 'switch' is in the url_args. The mandatory
  ## block of this interview needs we_have_switched to be defined in order to
  ## proceed, so clicking the link generated by this screen is the only way to
  ## proceed with the rest of the interview.
sets: we_have_switched
comment: |
  ## Docassemble needs the helps of "sets:" here to understand that this screen
  ## will lead to we_have_switched being defined. I don't think docassemble's
  ## logic understands that interview_url(switch=True) defines url_args, which
  ## needs to be defined in order to get the code in the next block to run.
question: |
    Send your client this link and tell them to click on it. It will take them to 
    the rest of the interview. Docassemble will send you your client's signed 
    documents when they are ready, or let you know if your client indicates that 
    they don't agree to sign the documents.
    
    [link to documents](${ interview_url(switch=True) })
subquestion: |
  Once you have sent the link to your client, you may close this window.
---
comment: |
  ## defines we_have_switched, allowing the interview to proceed.
code: |
  if 'switch' in url_args:
    we_have_switched = True
---
event: login_screen
question: |
  You will need to login to use this interview.
buttons:
  - Log in: signin
  - Exit: exit
---
question: |
  Template
subquestion: |
  
  Upload a Word document with a placeholder where you want your client's signature to go
  like this: {{ client.signature }}
fields:
  - Choose a template file: the_file
    datatype: file
help: |
  Edit your Word file and type  `{{client.signature}}` on the line
  in the file where you want the signature to appear.
  
  Like this: [FILE insert_signature.png]
  
  You can also type '{{ client }} wherever you want your client's name to appear
  
  If you launch this interview from Legal Server, we'll gather as many of the fields
  as we can. That also includes fields like `client.address_block()`, 
  `client.phone_number`, `client.mobile_number`, `client.email`, and `client.birthdate`.
---
comment: |
  ## This is the first screen the client sees upon clicking the link provided by
  ## their advocate.
question: |
  Welcome! You are here because your advocate needs you to review some documents,
  and sign them if you agree. The next screen will ask you for a sample of your 
  signature, but you will be given a chance to review any documents your advocate
  wants you to sign before they are sent you your advocate. Your signature will
  not be used without your permission.
field: client_splash_seen
subquestion: |
  Click "Continue" to keep going with the interview.
---
comment: |
  ## Main question text is put in the "under:" statement here because it displays
  ## better on mobile, and prevents the question text from blocking the touch
  ## screen.
question: |
  ${ client.name.firstlast() }
signature: client.signature
under: |
  Sign your name here by using your mouse or touching your phone's screen.
  Press clear if you want to start over. You will be able to review your 
  documents before they are sent to your advocate.
---
question: |
  Here are your documents. Please review them, and click yes if you agree to
  sign them. Otherwise, click no, and your advocate will be notified.
  
  ${ signed_document }
yesno: agrees_to_sign
---
attachment:
  - name: Your letter
    variable name: signed_document
    filename: letter
    docx template file:
      code: |
        the_file    
    valid formats:
      - pdf
      - docx
---
comment: |
  ## Sends the document package to the advocate if the client agrees to sign.
  ## Otherwise, lets the advocate know that the client didn't agree to sing the
  ## documents.
need:
  - agrees_to_sign
code: |
  if agrees_to_sign == True:
    send_email(to=[advocate.email], subject=str(client.name.firstlast()) + " Document Package", attachments=[signed_document])
    success_sending_email = True
  else:
    send_email(to=[advocate.email], subject=str(client.name.firstlast()) + " did not agree to sign")
    success_sending_email = False
---
event: end_screen
question: |
  % if success_sending_email == True:
    Your interview is complete.
    Your documents have been sent to your advocate.
  % elif success_sending_email == False:
    You have not agreed to sign your documents.
    Your advocate has been notified and will reach out to you.
  % else:
    Something went wrong. Please call or email ${ advocate.email_address() }  to let them know.
  % endif
subquestion: |
  You may now close this window.
---
event: kick_out_wrong_user
question: |
  I am sorry, this interview is not for you. 
  Please contact ${ advocate.email_address() } to let them know about this problem.
buttons:
  - Exit: exit